/*
**  CotW.cpp - Homework 7: Characters of the West
**  Cole Helbling, CISP 400
**  7 April 2018
*/

#include <algorithm>
#include <cassert>
#include <ctime>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <memory>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

// CITATION (of a sort) - Names generated by: http://www.fantasynamegenerators.com/cowboy-names.php
const string NAMES[] {	"Horace 'Hawkeyes' Raymond",
						"Ed 'Dynamite' Hartman",
						"Jay 'Truth' Moss",
						"Louis 'Integrity' Foreman",
						"Eliza 'Dawn Rider' Dickson",
						"Mamie 'Railroad' Porter",
						"Belle 'Naughty' Warner",
						"Ina 'Hustler' Sanford",
						"Jane 'Sureshot' Strickland",
						"Donald 'Scorpion' Colon"	};

class Person
{
public:
	bool dead = false;
	bool full_drink = true;
	string name;
	string type;

	Person()
	{
		// Specification 3 - Randomly select a name for each character
		int random = rand() % (sizeof(NAMES)/sizeof(*NAMES));
		string newname = NAMES[random];
		name = newname;
	}

	virtual int Play() = 0;
	virtual void Drink() = 0;
	virtual double Draw() = 0;

	string getName()
	{
		return name;
	}

	// Specification 1 - Include methods of setting object values
	void fillDrink()
	{
		full_drink = true;
	}

	int getDrinkStatus()
	{
		return full_drink;
	}

	int getDead()
	{
		return dead;
	}

	// Specification 2 - Overload the << operator to show class details
	friend ostream& operator<<(ostream & out, Person & player)
	{
		out << player.getName() << "\t\t" << ' ' << player.type << ' ' << player.getDrinkStatus() << ' ' << player.getDead() << '\n';
		return out;
	}
};

// Function Prototypes
void generatePlayers(vector<unique_ptr<Person>> &);
void ProgramGreeting();

class PokerPlayer : public Person
{
public:
	int drink = 0;

	PokerPlayer() : Person() {type = "PokerPlayer";}

	int Play()
	{
		int value = rand() % 52 + 1;

		if (this->full_drink && (rand() % 10 <= 1))
		{
			Drink();
			this->full_drink = false;
		}

		return value - (drink * 5);
	}

	void Drink()
	{
		drink++;
	}

	double Draw()
	{
		return 0.;
	}
};

class Gunslinger : public Person
{
public:
	int notches;
	Gunslinger() : Person() {type = "Gunslinger";}

	int Play()
	{
		Draw();
		return 0;
	}

	double Draw()
	{
		return rand() % 10 + 1;
	}

	void Drink()
	{
	}
};

class CardSharp : public Person
{
public:
	int highest = -1;
	double cheat_chance = 0.25;
	bool shot = false; // On the firing end of a gun
	bool hit = false; // On the receiving end of a gun

	CardSharp() : Person() {type = "CardSharp";}

	double Draw()
	{
		return rand() % 15 + 5;
	}

	int Play()
	{
		int value = rand() % 52 + 1;
		int cheat = rand() % 100 + 1;

		if (this->full_drink && (rand() % 10 <= 1))
		{
			Drink();
			this->full_drink = false;
		}

		if (cheat >= (cheat_chance * 100))
			return value;
		else
		{
			cheat = rand() % 100 + 1;
			if (cheat <= 50)
				return highest;
			else
			{
				// Interact with Gunslinger


				return -1;
			}
		}

	}

	void Drink()
	{
		cheat_chance += 0.05;
	}

	void setHighestCard(int max)
	{
		highest = max;
	}
};

class Bartender : public Person
{
public:
	Bartender() : Person() {type = "Bartender";}

	int Play()
	{
		return 0;
	}

	void Drink()
	{
	}

	double Draw()
	{
		return 0.;
	}
};

int main()
{
	srand(time(NULL));

	vector<unique_ptr<Person>> players;
	int turn = 0;
	bool playing = false;

	ProgramGreeting();

	// Specification 4 - Start with 2 poker players, 1 gunslinger, and 1 cardsharp
	players.push_back(make_unique<PokerPlayer>());
	players.push_back(make_unique<PokerPlayer>());
	players.push_back(make_unique<Gunslinger>());
	players.push_back(make_unique<CardSharp>());

	for (size_t i, max = players.size(); i != max; i++)
		cout << *players[i];

	do
	{
		size_t random = rand() % players.size();
		for (size_t i, max = players.size(); i != max; i++)
		{
			players[i]->Play();
			players[i]->Drink();
			players[i]->Draw();
			players[random]->fillDrink();
		}
		turn++;
	} while (playing);

	return 0;
}

void ProgramGreeting()
{
	cout << "Welcome to HW7, \"Characters of the West\", a Wild West saloon simulation!\n\n";
}

void generatePlayers(vector<unique_ptr<Person>> & players)
{
	int random = rand() % 4;
	switch (random)
	{
		case 0:
			players.push_back(make_unique<PokerPlayer>());
		case 1:
			players.push_back(make_unique<Gunslinger>());
		case 2:
			players.push_back(make_unique<CardSharp>());
		case 3:
			players.push_back(make_unique<Bartender>());
		default:
			cout << "Something happened that shouldn't have.\n";
			// Feature 1 - Make sure random doesn't get corrupted
			assert(random >= 0 || random <= 4);
			exit(1);
	}

	return;
}

/*int duplicatedName(string name, vector<unique_ptr<Person>> & players)
{
	if (players->getName() == name)
		return 1;
}
*/
